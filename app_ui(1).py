# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

# import encoder.inference2 as encoder
# from  synthesizer import Synthesizer
# import vocoder.inference as vocoder


class Ui_voicecloner(QtWidgets.QDialog):
    def setupUi(self, voicecloner):
        voicecloner.setObjectName("voicecloner")
        voicecloner.resize(994, 679)
        voicecloner.setMouseTracking(False)
        self.centralwidget = QtWidgets.QWidget(voicecloner)
        self.centralwidget.setObjectName("centralwidget")
        self.instructionBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.instructionBrowser.setGeometry(QtCore.QRect(570, 220, 401, 291))
        self.instructionBrowser.setObjectName("text")
        self.text = QtWidgets.QTextEdit(self.centralwidget)
        self.text.setGeometry(QtCore.QRect(50, 220, 481, 161))
        self.text.setObjectName("text")
        self.text.setFontPointSize(10)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(200, 40, 191, 31))
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(700, 40, 191, 31))
        self.label_3.setObjectName("label_3")
        self.generate_button = QtWidgets.QPushButton(self.centralwidget)
        self.generate_button.setGeometry(QtCore.QRect(210, 400, 161, 51))
        self.generate_button.setObjectName("generate_button")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(50, 140, 471, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.play_audio = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.play_audio.setObjectName("play_audio")
        self.horizontalLayout.addWidget(self.play_audio)
        self.stop_audio = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.stop_audio.setObjectName("stop_audio")
        self.horizontalLayout.addWidget(self.stop_audio)
        self.record = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.record.setObjectName("record")
        self.horizontalLayout.addWidget(self.record)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(50, 90, 471, 51))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.audio_browse_dropdown = QtWidgets.QComboBox(self.horizontalLayoutWidget_2)
        # self.audio_browse_dropdown.setObjectName("audio_browse_dropdown")
        # self.audio_browse_dropdown.setEditable(True)
        self.audio_browse_dropdown.setInsertPolicy(QtWidgets.QComboBox.InsertAtTop)
        self.horizontalLayout_2.addWidget(self.audio_browse_dropdown)
        self.browse_audio = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.browse_audio.setObjectName("browse_audio")
        self.audio_paths = []
        self.horizontalLayout_2.addWidget(self.browse_audio)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        # self.progressBar.setGeometry(QtCore.QRect(70, 550, 461, 16))
        # self.progressBar.setProperty("value", 24)
        # self.progressBar.setObjectName("progressBar")
        self.progress_text = QtWidgets.QLabel(self.centralwidget)
        self.progress_text.setGeometry(QtCore.QRect(70, 500, 211, 31))
        self.progress_text.setObjectName("progress_text")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(590, 90, 341, 84))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.output_dropdown = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.output_dropdown.setObjectName("output_dropdown")
        # self.output_dropdown.setEditable(True)
        # self.output_dropdown.setInsertPolicy(QtWidgets.QComboBox.InsertAtTop)
        # self.output_dropdown.addItem("")
        # self.output_dropdown.addItem("")
        self.verticalLayout_2.addWidget(self.output_dropdown)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.play_output = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.play_output.setObjectName("play_output")
        self.horizontalLayout_3.addWidget(self.play_output)
        self.stop_output = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.stop_output.setObjectName("stop_output")
        self.horizontalLayout_3.addWidget(self.stop_output)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(590, 180, 339, 16))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        voicecloner.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(voicecloner)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 994, 26))
        self.menubar.setObjectName("menubar")
        voicecloner.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(voicecloner)
        self.statusbar.setObjectName("statusbar")
        voicecloner.setStatusBar(self.statusbar)
        
        # models
        self.models_loaded = False
        self.encoder = None
        self.synthesizer = None
        self.vocoder = None
        

        self.retranslateUi(voicecloner)
        QtCore.QMetaObject.connectSlotsByName(voicecloner)

    def retranslateUi(self, voicecloner):
        _translate = QtCore.QCoreApplication.translate
        voicecloner.setWindowTitle(_translate("voicecloner", "MainWindow"))
        self.label.setText(_translate("voicecloner", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">find your audio file</span></p></body></html>"))
        self.label_3.setText(_translate("voicecloner", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">outputs</span></p></body></html>"))
        self.generate_button.setText(_translate("voicecloner", " Generate Audio"))
        self.instructionBrowser.setHtml(_translate("voicecloner", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
        "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
        "p, li { white-space: pre-wrap; }\n"
        "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
        "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt; font-weight:600; color:#000000;\">WELCOME TO VOICE CLONER</span></p>\n"
        "<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:12pt; font-weight:600; text-decoration: underline; color:#000000;\"><br /></p>\n"
        "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt; font-weight:600; color:#ff0000;\">INSTRUCTIONS:</span></p>\n"
        "<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt; font-weight:600; color:#000000;\"><br /></p>\n"
        "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt; color:#000000;\">1. Browse the audio file of the voice you want to clone or record your own voice.</span></p>\n"
        "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt; color:#000000;\"><br /></p>\n"
        "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt; color:#000000;\">2. Enter what you want your voice clone to say in the text box below</span></p>\n"
        "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt; color:#000000;\"><br /></p>\n"
        "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt; color:#000000;\">3. Click generate button and name the output file in the explorer</span></p>\n"
        "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt; color:#000000;\"><br /></p>\n"
        "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt; color:#000000;\">4. Play all your generated output files from the outputs section.</span></p>\n"
        "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:9pt; color:#000000;\"> </span></p>\n"
        "<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt; color:#000000;\"><br /></p>\n"
        "<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:9pt; font-weight:600; color:#ff0000;\"><br /></p>\n"
        "<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; color:#ff0000;\"><br /></p></body></html>"))
        
        self.play_audio.setText(_translate("voicecloner", "Play"))
        self.stop_audio.setText(_translate("voicecloner", "Stop"))
        self.record.setText(_translate("voicecloner", "Record"))
        self.browse_audio.setText(_translate("voicecloner", "browse"))
        self.progress_text.setText(_translate("voicecloner", "<html><head/><body><p><span style=\" font-weight:600;\">Ready to begin!</span></p></body></html>"))
        # self.output_dropdown.setItemText(0, _translate("voicecloner", "New Item"))
        # self.output_dropdown.setItemText(1, _translate("voicecloner", "New Item2"))
        self.play_output.setText(_translate("voicecloner", "Play"))
        self.stop_output.setText(_translate("voicecloner", "Stop"))
        
        
    def setup_actions(self):
        self.browse_audio.clicked.connect(self.browse_files)
        func = lambda : self.play_files(self.audio_browse_dropdown)
        self.play_audio.clicked.connect(func)
        self.stop_audio.clicked.connect(self.stop_files)
         
        self.generate_button.clicked.connect(self.generate)
        func = lambda : self.play_files(self.output_dropdown)
        self.play_output.clicked.connect(func)
        self.record.clicked.connect(self.record_audio)
        
    def record_audio(self):
        import sounddevice as sd
        duration  = 5
        sample_rate = 22050        
        wav = sd.rec(duration * sample_rate, sample_rate, 1)
        self.save_file(wav, sample_rate, self.audio_browse_dropdown)
        
        
    def play_files(self, widget):
        from pathlib import Path
        import librosa
        import sounddevice as sd
        
        content = widget.currentText()
        wav,sr = librosa.load(content)
        try:
            sd.stop()
            sd.play(wav, sr)
        except Exception as e:
            print(e)
            self.log("Error in audio playback. Try selecting a different audio output device.")
            self.log("Your device must be connected before you start the toolbox.")
            
        
    def stop_files(self):
        import sounddevice as sd
        sd.stop()

        
    
    def browse_files(self):
        fname = QtWidgets.QFileDialog.getOpenFileName(self, 'open file', 'C:/Users/Swaroop/Downloads')
        # self.audio_browse_dropdown.addItem(fname[0].split('/')[-1])
        if fname[0] not in self.audio_paths:
            self.audio_paths.append(fname[0])
            self.audio_browse_dropdown.insertItem(0, fname[0]) 
            
    def load_models(self):
        from pathlib import Path
        from encoder import inference2 as encoder
        from synthesizer.inference import Synthesizer
        from vocoder import inference as vocoder
        
        saved_encoder_model_path = Path("C:/Users/Swaroop/OneDrive/Documents/Real-Time-Voice-Cloning-master/saved_models/default/encoder.pt")
        saved_sythesizer_model_path = Path("./synthesizer/synthesizer.pt")
        saved_vocoder_model_path = Path("./vocoder/vocoder.pt")
        self.models_loaded = True


        encoder.load_model(saved_encoder_model_path)
        synthesizer = Synthesizer(saved_sythesizer_model_path)
        synthesizer.load()
        vocoder.load_model(saved_vocoder_model_path)
        
        self.encoder = encoder
        self.synthesizer = synthesizer
        self.vocoder = vocoder
        
    def generate(self):
        from pathlib import Path
        import librosa
        import sounddevice as sd
        
        self.progress_text.setText("Generating...")
        if not self.models_loaded:
            self.progress_text.setText("loading models...")
            self.load_models()
            self.progress_text.setText("models successfully loaded!")
            
        from encoder.audio import preprocess_wav
        self.progress_text.setText("ecreating the embeddings")
        wav, sr = librosa.load(self.audio_browse_dropdown.currentText())
        preprocessed_wav = preprocess_wav(wav, sr)
        embed = self.encoder.embed_utterance(preprocessed_wav, using_partials = False)
        self.progress_text.setText("embeddings created!")
        
        text = self.text.toPlainText()

        texts = [text]
        embeds = [embed]
        # If you know what the attention layer alignments are, you can retrieve them here by
        # passing return_alignments=True
        self.progress_text.setText("starting voice synthesis!")
        specs = self.synthesizer.synthesize_spectrograms(texts, embeds)
        spec = specs[0]

        print("Created the mel spectrogram")

        print("Synthesizing the waveform:")

        self.progress_text.setText("starting voice synthesis!")
        generated_wav = self.vocoder.infer_waveform(spec)

        
        
        
        self.save_file(generated_wav, 16000, self.output_dropdown)
        self.progress_text.setText("Done! click play under outputs to listen to the outputs")
        # ipd.Audio(generated_wav, rate = 16000)    
                
        
    def save_file(self, wav, sr, widget):
        from pathlib import Path
        import soundfile as sf
        
        dialog = QtWidgets.QFileDialog()
        dialog.setDefaultSuffix(".wav")
        fpath, _ = dialog.getSaveFileName(
            parent=self,
            caption="output",
            filter="Audio Files (*.flac *.wav)"
        )
        
        if fpath:
            #Default format is wav
            if Path(fpath).suffix == "":
                fpath += ".wav"
            sf.write(fpath, wav, sr)
            widget.insertItem(0, fpath)  
            
        
        
          
        
if __name__ == "__main__":                
    from PyQt5 import QtWidgets
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_voicecloner()
    ui.setupUi(MainWindow)
    ui.setup_actions()
    MainWindow.show()
    sys.exit(app.exec())